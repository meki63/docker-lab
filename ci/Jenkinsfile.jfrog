pipeline {
    agent any
    tools {
        jfrog 'jfrog-cli'
    }
    environment {
        //shegerlab2024.jfrog.io/petclinic
        DOCKER_IMAGE_NAME = "mdevops2024.jfrog.io/petclinic/petclinic:1.0.0"
    }

    parameters {
        
        string(name: 'SlackChannel', defaultValue: '#jenkins-build-sonar', description: 'Slack channel to send notifications')
        string(name: 'SlackTokenCredentialId', defaultValue: 'SLACK-TOKEN', description: 'Slack token credential ID')
    }
    stages {
        stage('Clone') {
            steps {
                git branch: 'master', url: "https://github.com/meki63/docker-lab.git"
            }
        }

        stage('Test') {
            steps {
                dir('petclinic-app') { // Change directory to 'petclinic-app'
                    sh 'mvn test' // Unit Test
                }
            }
        }
        
        stage('Build Package') {
            steps {
                dir('petclinic-app') { // Change directory to 'petclinic-app'
                    sh 'mvn -Dmaven.test.failure.ignore=true clean package' // Build the package without running tests
                }
            }
        }

        stage('Upload Package To Artifactory') {
            steps {
              dir('petclinic-app') { 
                script {
                    def artifactoryUrl = 'https://shegerlab2024.jfrog.io/artifactory/petclinic-generic-local/petclinic.jar'
                    def localJarPath = 'target/*-SNAPSHOT.jar'

                     jf 'rt u ${localJarPath} ${artifactoryUrl}'
                }
              }  
            }
        }

        stage('Build Docker image') {
            steps {
                 
                script {
                    docker.build("$DOCKER_IMAGE_NAME", 'petclinic-app')
                }
               
            }
        }

        stage('X-ray Scan') {
            steps {
                dir('petclinic-app/') {
                    // Scan Docker image for vulnerabilities
                    jf 'docker scan $DOCKER_IMAGE_NAME'

                }
            }
        }

        stage('Push Image To Artifactory') {
            steps {
                dir('petclinic-app/') {

                    // Push image to Artifactory
                    jf 'docker push $DOCKER_IMAGE_NAME'
                }
            }
        }

        stage('Publish build info') {
            steps {
                jf 'rt build-publish'
            }
        }
    }

    post {
        success {
            dir('petclinic-app') {
               junit '**/target/surefire-reports/TEST-*.xml' // Archive JUnit test results
                archiveArtifacts 'target/*.jar' // Archive JAR files
            }
        }

        always {
            slackSend (
                channel: params.SlackChannel, // Use the parameterized Slack channel
                color: currentBuild.result == 'SUCCESS' ? 'good' : 'danger', // Adjust color based on build result
                tokenCredentialId: params.SlackTokenCredentialId, // Use the parameterized Slack token
                message: "Pipeline Status: ${currentBuild.currentResult} - ${env.JOB_NAME} #${env.BUILD_NUMBER} - ${env.BUILD_URL}"
            )
        }

        cleanup {
            cleanWs() // Clean up the workspace
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '1', numToKeepStr: '3')) // Keep 3 builds for 1 day
    }
}